import base64, marshal
exec(marshal.loads(base64.b64decode(b'')))